{
  "version": 3,
  "sources": ["../bundle-qiuv04/checked-fetch.js", "../bundle-qiuv04/strip-cf-connecting-ip-header.js", "../../../worker/index.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-qiuv04/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-qiuv04/middleware-loader.entry.ts"],
  "sourceRoot": "/workspace/.wrangler/tmp/dev-nfCDOA",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "/**\n * Cloudflare Worker API Avec Amour v2\n * G\u00E8re : Produits, Cat\u00E9gories, R\u00E9seaux Sociaux, Settings, Upload R2\n */\n\nexport default {\n  async fetch(request, env) {\n    const url = new URL(request.url)\n    const path = url.pathname\n\n    // CORS Headers\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    }\n\n    // Handle CORS preflight\n    if (request.method === 'OPTIONS') {\n      return new Response(null, { headers: corsHeaders })\n    }\n\n    try {\n      // Routes API\n      if (path === '/api/init') {\n        return handleInit(env, corsHeaders)\n      }\n      \n      // Produits\n      if (path === '/api/products') {\n        if (request.method === 'GET') return getProducts(env, corsHeaders)\n        if (request.method === 'POST') return createProduct(request, env, corsHeaders)\n      }\n      if (path.startsWith('/api/products/')) {\n        const id = path.split('/')[3]\n        if (request.method === 'GET') return getProduct(id, env, corsHeaders)\n        if (request.method === 'PUT') return updateProduct(id, request, env, corsHeaders)\n        if (request.method === 'DELETE') return deleteProduct(id, env, corsHeaders)\n      }\n\n      // Cat\u00E9gories\n      if (path === '/api/categories') {\n        if (request.method === 'GET') return getCategories(env, corsHeaders)\n        if (request.method === 'POST') return createCategory(request, env, corsHeaders)\n      }\n      if (path.startsWith('/api/categories/')) {\n        const id = path.split('/')[3]\n        if (request.method === 'PUT') return updateCategory(id, request, env, corsHeaders)\n        if (request.method === 'DELETE') return deleteCategory(id, env, corsHeaders)\n      }\n\n      // R\u00E9seaux sociaux\n      if (path === '/api/socials') {\n        if (request.method === 'GET') return getSocials(env, corsHeaders)\n        if (request.method === 'POST') return createSocial(request, env, corsHeaders)\n      }\n      if (path.startsWith('/api/socials/')) {\n        const id = path.split('/')[3]\n        if (request.method === 'PUT') return updateSocial(id, request, env, corsHeaders)\n        if (request.method === 'DELETE') return deleteSocial(id, env, corsHeaders)\n      }\n\n      // Farms\n      if (path === '/api/farms') {\n        if (request.method === 'GET') return getFarms(env, corsHeaders)\n        if (request.method === 'POST') return createFarm(request, env, corsHeaders)\n      }\n      if (path.startsWith('/api/farms/')) {\n        const id = path.split('/')[3]\n        if (request.method === 'PUT') return updateFarm(id, request, env, corsHeaders)\n        if (request.method === 'DELETE') return deleteFarm(id, env, corsHeaders)\n      }\n\n      // Settings\n      if (path === '/api/settings') {\n        if (request.method === 'GET') return getSettings(env, corsHeaders)\n        if (request.method === 'POST') return createOrUpdateSetting(request, env, corsHeaders)\n      }\n      if (path.startsWith('/api/settings/')) {\n        const key = path.split('/')[3]\n        if (request.method === 'GET') return getSetting(key, env, corsHeaders)\n        if (request.method === 'PUT') return createOrUpdateSetting(request, env, corsHeaders)\n      }\n\n      // Upload R2\n      if (path === '/api/upload' && request.method === 'POST') {\n        return uploadToR2(request, env, corsHeaders)\n      }\n\n      // Auth\n      if (path === '/api/auth/login' && request.method === 'POST') {\n        return loginAdmin(request, env, corsHeaders)\n      }\n\n      // Admin Users\n      if (path === '/api/admin-users') {\n        if (request.method === 'GET') return getAdminUsers(env, corsHeaders)\n        if (request.method === 'POST') return createAdminUser(request, env, corsHeaders)\n      }\n      if (path.startsWith('/api/admin-users/')) {\n        const id = path.split('/')[3]\n        if (request.method === 'PUT') return updateAdminUser(id, request, env, corsHeaders)\n        if (request.method === 'DELETE') return deleteAdminUser(id, env, corsHeaders)\n      }\n\n      return new Response('Not Found', { status: 404, headers: corsHeaders })\n    } catch (error) {\n      return new Response(JSON.stringify({ error: error.message }), {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      })\n    }\n  }\n}\n\n// ============ INIT DATABASE ============\nasync function handleInit(env, corsHeaders) {\n  try {\n    // Cr\u00E9er les tables une par une\n    await env.DB.prepare(`\n      CREATE TABLE IF NOT EXISTS products (\n        id TEXT PRIMARY KEY,\n        name TEXT NOT NULL,\n        description TEXT,\n        category TEXT,\n        farm TEXT,\n        photo TEXT,\n        video TEXT,\n        medias TEXT,\n        variants TEXT,\n        price TEXT,\n        created_at TEXT,\n        updated_at TEXT\n      )\n    `).run()\n\n    await env.DB.prepare(`\n      CREATE TABLE IF NOT EXISTS categories (\n        id TEXT PRIMARY KEY,\n        name TEXT NOT NULL,\n        icon TEXT,\n        description TEXT\n      )\n    `).run()\n\n    await env.DB.prepare(`\n      CREATE TABLE IF NOT EXISTS socials (\n        id TEXT PRIMARY KEY,\n        name TEXT NOT NULL,\n        icon TEXT,\n        description TEXT,\n        url TEXT\n      )\n    `).run()\n\n    await env.DB.prepare(`\n      CREATE TABLE IF NOT EXISTS settings (\n        key TEXT PRIMARY KEY,\n        value TEXT\n      )\n    `).run()\n\n    await env.DB.prepare(`\n      CREATE TABLE IF NOT EXISTS farms (\n        id TEXT PRIMARY KEY,\n        name TEXT NOT NULL,\n        image TEXT,\n        description TEXT\n      )\n    `).run()\n\n    await env.DB.prepare(`\n      CREATE TABLE IF NOT EXISTS admin_users (\n        id TEXT PRIMARY KEY,\n        username TEXT NOT NULL UNIQUE,\n        password TEXT NOT NULL,\n        created_at TEXT,\n        updated_at TEXT\n      )\n    `).run()\n\n    // Cr\u00E9er un utilisateur admin par d\u00E9faut s'il n'existe pas (depuis variables d'environnement)\n    const defaultUsername = env.DEFAULT_ADMIN_USERNAME || 'admin'\n    const defaultPassword = env.DEFAULT_ADMIN_PASSWORD || 'admin123'\n    \n    const existingAdmin = await env.DB.prepare('SELECT * FROM admin_users WHERE username = ?').bind(defaultUsername).first()\n    if (!existingAdmin) {\n      const defaultAdminId = crypto.randomUUID()\n      const now = new Date().toISOString()\n      await env.DB.prepare(`\n        INSERT INTO admin_users (id, username, password, created_at, updated_at)\n        VALUES (?, ?, ?, ?, ?)\n      `).bind(defaultAdminId, defaultUsername, defaultPassword, now, now).run()\n    }\n\n    return new Response(JSON.stringify({ success: true, message: 'Database initialized' }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  }\n}\n\n// ============ PRODUCTS ============\n// Helper pour parser JSON en toute s\u00E9curit\u00E9\nfunction safeJSONParse(str, defaultValue = []) {\n  if (!str) return defaultValue;\n  \n  try {\n    const parsed = JSON.parse(str);\n    \n    // Si apr\u00E8s le parse on a encore une string, parser \u00E0 nouveau (double encoding)\n    if (typeof parsed === 'string') {\n      return safeJSONParse(parsed, defaultValue);\n    }\n    \n    return parsed;\n  } catch (e) {\n    // Essayer de r\u00E9parer le JSON cass\u00E9 (format {5g:80} ou \"{\"5g\":80,10g\":160}\")\n    if (typeof str === 'string' && str.includes(':')) {\n      try {\n        // Enlever les guillemets ext\u00E9rieurs en trop\n        let cleaned = str.trim();\n        if (cleaned.startsWith('\"') && cleaned.endsWith('\"')) {\n          cleaned = cleaned.slice(1, -1);\n        }\n        \n        // Ajouter des guillemets autour de TOUTES les cl\u00E9s sans guillemets\n        // {5g:80,10g:160} \u2192 {\"5g\":80,\"10g\":160}\n        const fixed = cleaned.replace(/([{,]\\s*)([^\":\\s]+)(\\s*):/g, '$1\"$2\"$3:');\n        \n        const result = JSON.parse(fixed);\n        return result;\n      } catch (e2) {\n        console.error('JSON parse error even after fix:', str, e2);\n        return defaultValue;\n      }\n    }\n    console.error('JSON parse error:', str);\n    return defaultValue;\n  }\n}\n\n// Convertir prices (objet) en variants (tableau)\nfunction convertPricesToVariants(prices) {\n  if (!prices) return [];\n  \n  const pricesObj = typeof prices === 'string' ? safeJSONParse(prices, {}) : prices;\n  if (!pricesObj || typeof pricesObj !== 'object') return [];\n  \n  return Object.entries(pricesObj).map(([name, price]) => ({\n    name,\n    price: typeof price === 'number' ? `${price}\u20AC` : price.toString()\n  }));\n}\n\n// Transformer un produit pour qu'il ait toujours des variants\nfunction transformProduct(p) {\n  let variants = safeJSONParse(p.variants, null);\n  \n  // Si variants est un OBJET (format {name: price}), le convertir en tableau\n  if (variants && typeof variants === 'object' && !Array.isArray(variants)) {\n    // C'est un objet de prix, convertir en tableau\n    variants = Object.entries(variants).map(([name, price]) => ({\n      name,\n      price: typeof price === 'number' ? `${price}\u20AC` : String(price)\n    }));\n  } else if (!Array.isArray(variants) || variants.length === 0) {\n    // Sinon si variants est vide, essayer prices\n    const pricesData = typeof p.prices === 'string' ? safeJSONParse(p.prices, null) : p.prices;\n    if (pricesData) {\n      variants = convertPricesToVariants(pricesData);\n    }\n  }\n  \n  // Si toujours pas de variants et qu'on a un price, cr\u00E9er un variant par d\u00E9faut\n  if (!variants || variants.length === 0) {\n    if (p.price && p.price !== 0 && p.price !== '0') {\n      variants = [{ name: 'Standard', price: `${p.price}\u20AC` }];\n    } else {\n      variants = [];\n    }\n  }\n  \n  // Normaliser les noms de colonnes (supporter ancienne et nouvelle structure)\n  return {\n    ...p,\n    id: p.id,\n    name: p.name,\n    description: p.description,\n    category: p.category || p.category_id,\n    farm: p.farm || p.farm_id,\n    photo: p.photo || p.image_url,\n    video: p.video || p.video_url,\n    variants,\n    medias: safeJSONParse(p.medias, []),\n    price: variants.length > 0 ? variants[0].price : (p.price || 'N/A'),\n    prices: typeof p.prices === 'string' ? safeJSONParse(p.prices, null) : p.prices\n  };\n}\n\nasync function getProducts(env, corsHeaders) {\n  const { results } = await env.DB.prepare('SELECT * FROM products ORDER BY created_at DESC').all()\n  \n  // Transformer les produits pour avoir toujours des variants\n  const products = results.map(transformProduct)\n\n  return new Response(JSON.stringify(products), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\nasync function getProduct(id, env, corsHeaders) {\n  const product = await env.DB.prepare('SELECT * FROM products WHERE id = ?').bind(id).first()\n  \n  if (!product) {\n    return new Response(JSON.stringify({ error: 'Product not found' }), {\n      status: 404,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  }\n\n  return new Response(JSON.stringify(transformProduct(product)), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\nasync function createProduct(request, env, corsHeaders) {\n  const data = await request.json()\n  const id = data.id || Date.now().toString()\n  \n  await env.DB.prepare(`\n    INSERT OR REPLACE INTO products (id, name, description, category, farm, photo, video, medias, variants, price, created_at, updated_at)\n    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n  `).bind(\n    id,\n    data.name,\n    data.description,\n    data.category,\n    data.farm,\n    data.photo,\n    data.video,\n    JSON.stringify(data.medias || []),\n    JSON.stringify(data.variants || []),\n    data.price,\n    data.created_at || new Date().toISOString(),\n    new Date().toISOString()\n  ).run()\n\n  return new Response(JSON.stringify({ success: true, id }), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\nasync function updateProduct(id, request, env, corsHeaders) {\n  const data = await request.json()\n  \n  await env.DB.prepare(`\n    INSERT OR REPLACE INTO products (id, name, description, category, farm, photo, video, medias, variants, price, created_at, updated_at)\n    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n  `).bind(\n    id,\n    data.name,\n    data.description,\n    data.category,\n    data.farm,\n    data.photo,\n    data.video,\n    JSON.stringify(data.medias || []),\n    JSON.stringify(data.variants || []),\n    data.price,\n    data.created_at || new Date().toISOString(),\n    new Date().toISOString()\n  ).run()\n\n  return new Response(JSON.stringify({ success: true }), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\nasync function deleteProduct(id, env, corsHeaders) {\n  try {\n    // R\u00E9cup\u00E9rer le produit avant de le supprimer pour avoir les URLs des fichiers\n    const product = await env.DB.prepare('SELECT * FROM products WHERE id = ?').bind(id).first()\n    \n    if (product) {\n      // Supprimer les fichiers R2 (photo et video)\n      const filesToDelete = []\n      \n      if (product.photo && product.photo.includes('r2.dev')) {\n        const filename = product.photo.split('/').pop()\n        filesToDelete.push(filename)\n      }\n      \n      if (product.video && product.video.includes('r2.dev')) {\n        const filename = product.video.split('/').pop()\n        filesToDelete.push(filename)\n      }\n      \n      // Supprimer les fichiers du bucket R2\n      for (const filename of filesToDelete) {\n        try {\n          await env.R2.delete(filename)\n          console.log(`Deleted R2 file: ${filename}`)\n        } catch (error) {\n          console.error(`Error deleting R2 file ${filename}:`, error)\n        }\n      }\n    }\n    \n    // Supprimer le produit de la base de donn\u00E9es\n    await env.DB.prepare('DELETE FROM products WHERE id = ?').bind(id).run()\n    \n    return new Response(JSON.stringify({ success: true }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  }\n}\n\n// ============ CATEGORIES ============\nasync function getCategories(env, corsHeaders) {\n  const { results } = await env.DB.prepare('SELECT * FROM categories').all()\n  \n  return new Response(JSON.stringify(results), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\nasync function createCategory(request, env, corsHeaders) {\n  const data = await request.json()\n  const id = data.id || Date.now().toString()\n  \n  await env.DB.prepare(`\n    INSERT OR REPLACE INTO categories (id, name, icon, description)\n    VALUES (?, ?, ?, ?)\n  `).bind(id, data.name, data.icon, data.description).run()\n\n  return new Response(JSON.stringify({ success: true, id }), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\nasync function updateCategory(id, request, env, corsHeaders) {\n  const data = await request.json()\n  \n  await env.DB.prepare(`\n    INSERT OR REPLACE INTO categories (id, name, icon, description)\n    VALUES (?, ?, ?, ?)\n  `).bind(id, data.name, data.icon, data.description).run()\n\n  return new Response(JSON.stringify({ success: true }), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\nasync function deleteCategory(id, env, corsHeaders) {\n  await env.DB.prepare('DELETE FROM categories WHERE id = ?').bind(id).run()\n  \n  return new Response(JSON.stringify({ success: true }), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\n// ============ SOCIALS ============\nasync function getSocials(env, corsHeaders) {\n  const { results } = await env.DB.prepare('SELECT * FROM socials').all()\n  \n  return new Response(JSON.stringify(results), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\nasync function createSocial(request, env, corsHeaders) {\n  const data = await request.json()\n  const id = data.id || Date.now().toString()\n  \n  await env.DB.prepare(`\n    INSERT OR REPLACE INTO socials (id, name, icon, description, url)\n    VALUES (?, ?, ?, ?, ?)\n  `).bind(id, data.name, data.icon, data.description, data.url).run()\n\n  return new Response(JSON.stringify({ success: true, id }), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\nasync function updateSocial(id, request, env, corsHeaders) {\n  const data = await request.json()\n  \n  await env.DB.prepare(`\n    INSERT OR REPLACE INTO socials (id, name, icon, description, url)\n    VALUES (?, ?, ?, ?, ?)\n  `).bind(id, data.name, data.icon, data.description, data.url).run()\n\n  return new Response(JSON.stringify({ success: true }), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\nasync function deleteSocial(id, env, corsHeaders) {\n  await env.DB.prepare('DELETE FROM socials WHERE id = ?').bind(id).run()\n  \n  return new Response(JSON.stringify({ success: true }), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\n// ============ SETTINGS ============\nasync function getSettings(env, corsHeaders) {\n  const { results } = await env.DB.prepare('SELECT * FROM settings').all()\n  \n  const settings = {}\n  results.forEach(row => {\n    try {\n      settings[row.key] = JSON.parse(row.value)\n    } catch (e) {\n      settings[row.key] = row.value\n    }\n  })\n\n  return new Response(JSON.stringify(settings), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\nasync function getSetting(key, env, corsHeaders) {\n  const result = await env.DB.prepare('SELECT * FROM settings WHERE key = ?').bind(key).first()\n  \n  if (!result) {\n    return new Response(JSON.stringify(null), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  }\n\n  try {\n    // On retourne l'objet complet pars\u00E9 (avec key, shopName, backgroundImage, etc.)\n    const parsedValue = JSON.parse(result.value)\n    return new Response(JSON.stringify(parsedValue), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  } catch (e) {\n    // Si ce n'est pas du JSON, on retourne quand m\u00EAme un objet avec key et value\n    return new Response(JSON.stringify({ key: result.key, value: result.value }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  }\n}\n\nasync function createOrUpdateSetting(request, env, corsHeaders) {\n  const data = await request.json()\n  \n  // Si data.key existe, on sauvegarde un seul setting\n  if (data.key) {\n    await env.DB.prepare(`\n      INSERT OR REPLACE INTO settings (key, value)\n      VALUES (?, ?)\n    `).bind(data.key, JSON.stringify(data)).run()\n\n    return new Response(JSON.stringify({ success: true }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  }\n  \n  // Sinon, on sauvegarde plusieurs settings\n  for (const [key, value] of Object.entries(data)) {\n    await env.DB.prepare(`\n      INSERT OR REPLACE INTO settings (key, value)\n      VALUES (?, ?)\n    `).bind(key, JSON.stringify(value)).run()\n  }\n\n  return new Response(JSON.stringify({ success: true }), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\n// ============ FARMS ============\nasync function getFarms(env, corsHeaders) {\n  const { results } = await env.DB.prepare('SELECT * FROM farms').all()\n  \n  return new Response(JSON.stringify(results), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\nasync function createFarm(request, env, corsHeaders) {\n  const data = await request.json()\n  const id = data.id || Date.now().toString()\n  \n  await env.DB.prepare(`\n    INSERT OR REPLACE INTO farms (id, name, image, description)\n    VALUES (?, ?, ?, ?)\n  `).bind(id, data.name, data.image || null, data.description || null).run()\n\n  return new Response(JSON.stringify({ success: true, id }), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\nasync function updateFarm(id, request, env, corsHeaders) {\n  const data = await request.json()\n  \n  await env.DB.prepare(`\n    INSERT OR REPLACE INTO farms (id, name, image, description)\n    VALUES (?, ?, ?, ?)\n  `).bind(id, data.name, data.image || null, data.description || null).run()\n\n  return new Response(JSON.stringify({ success: true }), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\nasync function deleteFarm(id, env, corsHeaders) {\n  await env.DB.prepare('DELETE FROM farms WHERE id = ?').bind(id).run()\n  \n  return new Response(JSON.stringify({ success: true }), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\n// ============ AUTH ============\nasync function loginAdmin(request, env, corsHeaders) {\n  try {\n    const { username, password } = await request.json()\n    \n    const user = await env.DB.prepare(\n      'SELECT * FROM admin_users WHERE username = ? AND password = ?'\n    ).bind(username, password).first()\n    \n    if (user) {\n      // Cr\u00E9er un token simple (dans une vraie app, utiliser JWT)\n      const token = btoa(`${user.id}:${Date.now()}`)\n      return new Response(JSON.stringify({ \n        success: true, \n        token,\n        user: { id: user.id, username: user.username }\n      }), {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      })\n    } else {\n      return new Response(JSON.stringify({ \n        success: false, \n        error: 'Identifiants invalides' \n      }), {\n        status: 401,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      })\n    }\n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  }\n}\n\n// ============ ADMIN USERS ============\nasync function getAdminUsers(env, corsHeaders) {\n  const { results } = await env.DB.prepare('SELECT id, username, created_at, updated_at FROM admin_users ORDER BY created_at DESC').all()\n  \n  return new Response(JSON.stringify(results), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\nasync function createAdminUser(request, env, corsHeaders) {\n  try {\n    const data = await request.json()\n    const id = crypto.randomUUID()\n    const now = new Date().toISOString()\n    \n    // V\u00E9rifier si le username existe d\u00E9j\u00E0\n    const existing = await env.DB.prepare('SELECT * FROM admin_users WHERE username = ?').bind(data.username).first()\n    if (existing) {\n      return new Response(JSON.stringify({ \n        success: false, \n        error: 'Ce nom d\\'utilisateur existe d\u00E9j\u00E0' \n      }), {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      })\n    }\n    \n    await env.DB.prepare(`\n      INSERT INTO admin_users (id, username, password, created_at, updated_at)\n      VALUES (?, ?, ?, ?, ?)\n    `).bind(id, data.username, data.password, now, now).run()\n\n    return new Response(JSON.stringify({ success: true, id }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  }\n}\n\nasync function updateAdminUser(id, request, env, corsHeaders) {\n  try {\n    const data = await request.json()\n    const now = new Date().toISOString()\n    \n    // Si on change le username, v\u00E9rifier qu'il n'existe pas\n    if (data.username) {\n      const existing = await env.DB.prepare('SELECT * FROM admin_users WHERE username = ? AND id != ?').bind(data.username, id).first()\n      if (existing) {\n        return new Response(JSON.stringify({ \n          success: false, \n          error: 'Ce nom d\\'utilisateur existe d\u00E9j\u00E0' \n        }), {\n          status: 400,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        })\n      }\n    }\n    \n    // R\u00E9cup\u00E9rer l'utilisateur actuel\n    const currentUser = await env.DB.prepare('SELECT * FROM admin_users WHERE id = ?').bind(id).first()\n    \n    if (!currentUser) {\n      return new Response(JSON.stringify({ error: 'Utilisateur non trouv\u00E9' }), {\n        status: 404,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      })\n    }\n    \n    // Mettre \u00E0 jour\n    await env.DB.prepare(`\n      UPDATE admin_users \n      SET username = ?, password = ?, updated_at = ?\n      WHERE id = ?\n    `).bind(\n      data.username || currentUser.username,\n      data.password || currentUser.password,\n      now,\n      id\n    ).run()\n\n    return new Response(JSON.stringify({ success: true }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  }\n}\n\nasync function deleteAdminUser(id, env, corsHeaders) {\n  try {\n    // V\u00E9rifier qu'il reste au moins un admin\n    const { results } = await env.DB.prepare('SELECT COUNT(*) as count FROM admin_users').all()\n    if (results[0].count <= 1) {\n      return new Response(JSON.stringify({ \n        success: false, \n        error: 'Impossible de supprimer le dernier administrateur' \n      }), {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      })\n    }\n    \n    await env.DB.prepare('DELETE FROM admin_users WHERE id = ?').bind(id).run()\n    \n    return new Response(JSON.stringify({ success: true }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  }\n}\n\n// ============ R2 UPLOAD ============\nasync function uploadToR2(request, env, corsHeaders) {\n  try {\n    const formData = await request.formData()\n    const file = formData.get('file')\n    \n    if (!file) {\n      return new Response(JSON.stringify({ error: 'No file provided' }), {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      })\n    }\n\n    const filename = `${Date.now()}-${file.name}`\n    const buffer = await file.arrayBuffer()\n    \n    // Upload vers R2\n    await env.R2.put(filename, buffer, {\n      httpMetadata: {\n        contentType: file.type\n      }\n    })\n\n    const url = `https://pub-f470c04188bb475099ee04701b1a42db.r2.dev/${filename}`\n\n    return new Response(JSON.stringify({ url, filename }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  }\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/workspace/worker/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/workspace/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/workspace/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/workspace/worker/index.js\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/workspace/.wrangler/tmp/bundle-qiuv04/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/workspace/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/workspace/.wrangler/tmp/bundle-qiuv04/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/workspace/.wrangler/tmp/bundle-qiuv04/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
